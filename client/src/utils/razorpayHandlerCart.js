// src/utils/razorpayHandlerCart.js

// Function to dynamically load the Razorpay SDK script
export const loadRazorpayScript = () => {
  return new Promise((resolve) => {
    const script = document.createElement("script");
    script.src = "https://checkout.razorpay.com/v1/checkout.js";
    script.onload = () => resolve(true); // Resolve true when script loads successfully
    script.onerror = () => {
      console.error("Failed to load Razorpay SDK.");
      resolve(false); // Resolve false if there's an error loading the script
    };
    document.body.appendChild(script); // Append the script to the document body
  });
};

/**
 * Initiates a Razorpay payment specifically for a shopping cart order.
 *
 * @param {Object} params - Parameters for the Razorpay payment.
 * @param {string} params.razorpayKeyId - Your Razorpay Key ID.
 * @param {Object} params.razorpayOrder - Razorpay order details (id, amount, currency) from your backend.
 * @param {Object} params.product - General product details for the Razorpay popup (e.g., { name: "Your Shopping Cart Order" }).
 * @param {Object} params.user - User details (name, email, phone) for prefill.
 * @param {Object} params.selectedAddress - Selected shipping address details for prefill and notes.
 * @param {Object} params.originalCheckoutData - The complete order payload from Cart.jsx, to be sent to the backend for verification.
 * @param {Function} params.dispatch - Redux dispatch function.
 * @param {Function} params.placeOnlineOrderThunk - The Redux thunk for backend payment verification (e.g., placeOnlineOrderCart).
 * @param {Function} params.navigate - React Router navigate function.
 */
export const startRazorpayCartPayment = async ({
  razorpayKeyId,
  razorpayOrder,
  product,
  user,
  selectedAddress,
  originalCheckoutData, // This is the full 'orderPayload' from Cart.jsx
  dispatch,
  placeOnlineOrderThunk,
  navigate,
}) => {
  // Ensure Razorpay Key ID is available
  if (!razorpayKeyId) {
    alert("Razorpay Key ID is not available. Cannot proceed with payment.");
    return;
  }

  // Basic validation for Razorpay order details from backend
  if (!razorpayOrder || !razorpayOrder.id || !razorpayOrder.amount) {
    console.error(
      "Invalid Razorpay order details provided to cart handler:",
      razorpayOrder
    );
    alert(
      "Payment initiation failed. Missing crucial order details from backend."
    );
    return;
  }

  // Load Razorpay SDK script dynamically if not already loaded
  const scriptLoaded = await loadRazorpayScript();
  if (!scriptLoaded) {
    alert(
      "Failed to load Razorpay SDK. Please check your internet connection."
    );
    return;
  }

  // Define Razorpay payment options
  const options = {
    key: razorpayKeyId, // Your Public Razorpay Key ID
    amount: razorpayOrder.amount, // Amount in smallest currency unit (paise), provided by backend
    currency: razorpayOrder.currency || "INR", // Currency, default to INR
    order_id: razorpayOrder.id, // Razorpay Order ID generated by your backend
    name: "Your E-commerce Store", // Name displayed on the Razorpay popup
    description: product.name || "Shopping Cart Order", // Description for the payment
    image: "https://placehold.co/100x100/A0B0C0/FFFFFF?text=Logo", // Your store's logo URL
    handler: async function (response) {
      // This function executes upon successful payment on Razorpay's side
      console.log("Razorpay success response for cart payment:", response);

      // Construct the data payload to send to your backend for payment verification
      // The keys here MUST match what your backend's verifyCartPaymentAndCreateOrder expects
      const dataToSendToBackend = {
        razorpay_payment_id: response.razorpay_payment_id,
        razorpay_order_id: response.razorpay_order_id,
        razorpay_signature: response.razorpay_signature,
        // Pass the ENTIRE original checkout data for the cart to allow backend re-validation
        orderDetails: originalCheckoutData,
      };

      console.log(
        "Sending to backend for cart payment verification:",
        dataToSendToBackend
      );

      // Dispatch the thunk to verify payment and create the order on your backend
      const result = await dispatch(placeOnlineOrderThunk(dataToSendToBackend));

      // Handle the result from your backend's verification
      if (
        result.meta.requestStatus === "fulfilled" &&
        result.payload?.success && // Check for 'success' flag from backend response
        result.payload?.order?._id // Check if the order ID is present in the payload
      ) {
        alert("Payment successful! Your cart order has been placed.");
        // Navigate to the order success page with the new order ID
        navigate(`/order-success/${result.payload.order._id}`);
      } else {
        // Handle cases where payment was successful but backend verification failed
        console.error(
          "Backend order verification failed for cart:",
          result.payload
        );
        alert(
          "Payment successful, but order verification failed: " +
            (result.payload?.message ||
              "Unknown error occurred during order processing.") +
            " Please contact support with Payment ID: " +
            response.razorpay_payment_id
        );
        // Navigate to a payment failed page or show an appropriate message
        navigate("/payment-failed");
      }
    },
    prefill: {
      // Pre-fill user details for a smoother checkout experience
      name: user?.name || "",
      email: user?.email || "",
      contact: selectedAddress?.phone || user?.phone || "", // Prioritize address phone, then user phone
    },
    notes: {
      // Add relevant notes for the payment record
      addressLine1: selectedAddress?.addressLine1 || "",
      city: selectedAddress?.city || "",
      userId: user?._id || "Guest", // Include user ID if available
    },
    theme: {
      color: "#10b981", // Your brand's primary color for the Razorpay popup
    },
  };

  // Create and open the Razorpay payment object
  const paymentObject = new window.Razorpay(options);

  // Attach a listener for payment failure events
  paymentObject.on("payment.failed", function (response) {
    console.error("Razorpay payment failed for cart:", response);
    alert(
      `Payment Failed: ${
        response.error.description || "Unknown error occurred."
      }`
    );
    // Navigate to a payment failed page
    navigate("/payment-failed");
  });

  paymentObject.open(); // Open the Razorpay modal
};
